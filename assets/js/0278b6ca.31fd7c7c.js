"use strict";(self.webpackChunkictf_docs=self.webpackChunkictf_docs||[]).push([[896],{3357:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var n=r(4848),s=r(8453);const i={},o=void 0,a={id:"writeups/stop-the-spammer/solution.py",title:"solution.py",description:"",source:"@site/docs/writeups/stop-the-spammer/solution.py.md",sourceDirName:"writeups/stop-the-spammer",slug:"/writeups/stop-the-spammer/solution.py",permalink:"/ictf-docs/writeups/stop-the-spammer/solution.py",draft:!1,unlisted:!1,editUrl:"https://github.com/ucsb-seclab/ictf-docs/tree/main/docs/writeups/stop-the-spammer/solution.py.md",tags:[],version:"current",frontMatter:{},sidebar:"writeups",previous:{title:"Stop the spammer!",permalink:"/ictf-docs/writeups/stop-the-spammer/"},next:{title:"Tensormania",permalink:"/ictf-docs/writeups/tensormania/"}},u={},c=[];function p(e){const t={code:"code",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"import imagehash\r\nfrom PIL import Image\r\nfrom tqdm import tqdm\r\nimport numpy as np\r\nfrom collections import Counter\r\nimport os\r\n\r\n# read the data files\r\nquery_images = np.load(os.path.join('src','model_queries.npy'))\r\n\r\nfp = open(os.path.join('src', 'user_query_indices.txt'), 'r')\r\nuser_query_indices = {}\r\n\r\n# each line in the file is a user id (first line: user-id:0, second line, user-id:1...)\r\nfor ii, l in enumerate(fp.readlines()):\r\n    items = l.split(',')\r\n    user_query_indices[ii] = np.asarray([int(i) for i in items])\r\n\r\n\r\n# take the perceptual hash of each item to find near duplicates\r\nall_hashes = []\r\nfor im in tqdm(query_images):\r\n    h = hash(im.tobytes())\r\n    all_hashes.append(str(h))\r\nall_hashes = np.asarray(all_hashes)\r\n\r\n# find the users that issued multiple similar images, suspicious\r\nall_hashes_ctr = Counter(all_hashes)\r\nduplicate_image_hashes = [h for h,cnt in all_hashes_ctr.items() if cnt > 1]\r\n\r\nuser_duplicate_counts = {}\r\n\r\nfor imh in duplicate_image_hashes:\r\n    duplicate_image_indices = np.where(all_hashes == imh)[0]\r\n    for uid in user_query_indices:\r\n        if len(np.intersect1d(duplicate_image_indices, user_query_indices[uid])) > 0:\r\n            if uid not in user_duplicate_counts:\r\n                user_duplicate_counts[uid] = 0\r\n            user_duplicate_counts[uid] += 1\r\n\r\nuser_duplicate_counts_ctr = Counter(user_duplicate_counts)\r\n\r\n# find the suspicious users that sent near duplicates\r\nattackers = [uid for uid, ctr in user_duplicate_counts_ctr.most_common() if ctr > 1]\r\n\r\n# construct the flag\r\nbad_users_string = f','.join([str(i) for i in np.sort(attackers)])\r\nflag = f'ictf{{{bad_users_string}}}'\r\n\r\nfp = open('flag_sol.txt', 'w')\r\nfp.write(flag)\r\nfp.close()\r\nprint(f\"flag {flag}\")\n"})})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>a});var n=r(6540);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);